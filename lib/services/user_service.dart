import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:rwallet/models/user_model.dart';

class UserService {
  static FirebaseFirestore firestore = FirebaseFirestore.instance;
  static CollectionReference users = firestore.collection('users');

  static Future<UserModel?> getUser(String uid) async {
    try {
      final docUser = await users.doc(uid).get();
      if (docUser.exists) {
        return UserModel.fromJson(docUser.data() as Map<String, dynamic>);
      }
      return null;
    } catch (e) {
      print('Error en getUser ${e}');
      return null;
    }
  }

  static Future<bool> saveDataRegister(
    User user,
    String displayName,
    String provider,
  ) async {
    try {
      displayName = displayName.isEmpty ? user.displayName! : displayName;
      String photoDefault =
          '/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxIQEhASEhAQFRAQEBAQEBAQEA8QDw8PFRIWFhUSFRUYHSggGBolGxUVITEhJSkrLi4uFx8zODMtNyg5LisBCgoKDg0OGhAQGi0dHR0tLS0tLSsrLS0tKystLS0tLSstLS0tKy0tLSsrLS0tLS0rLS0tLTctKystKzctLSs3K//AABEIAOEA4QMBIgACEQEDEQH/xAAcAAABBQEBAQAAAAAAAAAAAAAEAQIDBQYABwj/xAA+EAABAwIEBAMEBgkEAwAAAAABAAIDBBEFEiExBkFRcRMiYTJSgZEUI0KxssEVJDNTcpKTodEHQ2LwNFSC/8QAGwEAAgMBAQEAAAAAAAAAAAAAAgMAAQQFBgf/xAApEQACAgEDBAMAAQUBAAAAAAAAAQIDEQQSIQUxMkETIlEUFTNCUpEG/9oADAMBAAIRAxEAPwAahIyN0HyHVFNDfdb8ggqM+Rvb80SCtupk/llz7Mmkivhjx6CAxvut+QShrfdb8gohIlzhZ8y/TTtj+E2Rvut+QS+G33W/IKIOTw5U5S/S9q/DQ4RTx+ED4bL3OuVqLbTx/u4/5GofBjeD/wCiimLha6ct/c6WlhHb2F+iRn/aj/kap4aOL91F/TZ/hMaVMwrCpS/X/wBNDrj+B9NQwkfsIf6bP8IgYbB+4h/ps/wo6NyOC0wk37MVkEn2IG4ZB/68P9Jn+EDjPD8Mjbsija5uoyxsF/7K3Ce1btPPnDEuKPNJKdrSQWNuDY+VqTw2+635BaniTCCfrI26/aA+9UcWFzO2YfjotspKKywNo3Dg0PF2t102C0MbG+63+UKogwOe4Nmi3Uq7jonjchczUWKT4NFWEg2kiYR7Df5QhcfpQGBwaBbewA0RtIzKE7E488TwN7JulkuwM+5kA4JQR6IUusbJweuhhMWE5h6JwcOgQoKeHKOKIFAjoE8W6BCB6kY9VtRMhOnQfJLp0HyCHzrs6m0IJ090fIJUNnXKbSzzukPkb2/NEh6BoHfVt7fmj6enfIbMaXH0CfZanJyZjphtgoihyW6uqLhl5sZDl/480JjWH+C4W9krG9XFPBqVLwAhycJPVQgp11oUsoVKODZ8OC8B/iKnOig4U/YH+IqaTf4rh67zOjpfAkBUrSh2lSNcsmDUWlE9WbToqOlfZW8DrhNq7mW6PsnBUjSmAJQVpg8MzMluonqRRyLVfLNYKXJCU1KVy5ayO7DmKUKJoUjCtdMWmBJowdaLSPH/ACP3qIFGcRQ+HMf+XmCrc66cXwJbCLpcygbInZ0WSEudKHoe6XMpkgUJU7xEGHJ4eqyFkKzrkL4i5VuLMSGZPL0Wt4LqxGeXm37LK4i+0rx6j7giMHrMrlmtm3DgqEUpYPUKwfaGxVNi1N4rCOYBsjcLqhIzKdwNFHObLlttHRguDAvbYkHcFOYCSABclXtTgLpZMzdGuN3FXeH4RHCBoC7mSNVrhrNscMzz0+ZHcOU7o4bOFiSTZLMNSrAFMkaCDosVtnySyaK4bFgr2lTNURTmlAOCoXbK3pH6KkjKPpKgAakBOpqnOSSRm1FkIx5ZcAp7VSVXEUEY1eCegVHU8bbhjNORK7lXS7Z+sHn7+rU18Lk3OZD1FWxu7gPivO5+IJ3m+cj0CClq3uNy9x7ldKvpHGJM5F3X3/gjfVGOwMvd4+Cq6jjGJuzSVipDdDyBbauk0R9GCXV9RP2bN/HTOUbkjePB+6PzWFK661f0+j8B/nX/AOxrMXxltSWuAsQLEIMSqmpX6q5+jPDQ4jynmsWs0sIQzFHQ6drbZW7ZMeyRSeIhwluuIemTJs6XOoA5cXKMvJPnTw5DByeHIS0ye65RZ1ynARjcafaeTuPwhCwVOVwUuOu+vl7j8IVcVmSzEGTxI9G4fxH2dVqHNa+zgvK8AxGxAXoWFVeljzXOti0zpUS3ItWtsnphKQOSMZGy4HJTsUxzwNyqnEeIYorgG59Fs0+guu8UYNRr6qVywiQ2OqCqcUjj3IWYxDG3yEkaAqrkeTvcr02k/wDPpLNh57VdelLivg0dVxMfsD5qTCKeors5D8uX4AnosuxpcQ0bkgDuV65w7QilgYDuQC7uVo10adFVmC5M2jd2rs+7yjzrEMKmgdaRp77hQsXrj3MkFnNBHqs9inCkT7ujfldvlOy5ul6008SNmr6JGazHhmMjKlSVEBicWE6jpqkDl6am1WxUkeP1NDpm4P0RuUEiIcoJAmioAxSXTnBMKM0IfCdQvS+GIGzU5a/b7l5kzQq4w+vkZJEGvcGm9wDosXUIv4WbunyS1Eclji9J4EhZe9tR2KDzJ/EM58QE3JLQqv6SvJV2uR7eUFEssy66rhV23SivCbuA4LG6UOVW6vCZ+kx6IWycFvmXKn/SYXKsl5RnMfqHfSpW5fKHN8x5+QIMyHVabFoYnyvzg3uNR2CAmwcFpLHg+nNLh4kmuWU9JUFrwfVeg4HXZgNei89mpnMOrSPgrrAcRykN5pNlW/hDabVXyz1iCUFoN0DiOMxwjcF3RZiXGHtFmncKlmkLiSTcrs9O6HuxOw4/UeuNtwqLbEcckkvY2CqHEndNSr09dMKliKPMWWTm8yeTk0pyRxTcgI0fBNC18plkIEcWup3ctnJjsT3ZWvGnay8hfPI24a45Tu3kU6Gu63BXnur6C3UcxPS9I1dNPEj2QTaXuqfE67K1zidhpqs1w9jL83hucS0jRR8T4hmeI2nQe16leb02gsleotHe1WurjS5pgrZi4lx3JupggoHoxpXvK4Rqgo/h831DldY5fo4qGVdNVMZu5o+IVVWcQQt537KndBey69FbJ8IMeVESqWXidn2WOQT+JHcmJb11S9m+HTbfaNOwotr7ZD7rgsO7iR/Sys8H4lEj2xvb7ZDQ4cidkuzWVzi0Pr6dZGakbPHpgXNtyAuqKprms3KdiniQSOZJ7VrgenIrLVlWSSvKuKjJ4PUqTcVktqnFwQQN0G2vI2VSZrpWyKxTZcCuJT/pBVQyRSiQoSZZZeOlQHirlROTVYp+1f3/ACCFBsisSP1r+/5BBmQbIIv6o1S7sIZU8nNDh67pGUUbD4jB7WwP2VBdHQxuMea2g0utWklFWrJh10G6ngjcVGuLk269tDDimjxzi08MUlcmlcCrcSYHJCuzJjnoG8cstRbGvTHMBTXy9/gFJT4dUS+yyzertFkt19Nfdm+nRXT7IY1xYQ5riCEx+IguJLszz01JKt6bhAkgyzOPVrRYLQ0GCQRDyxi/Ui5XGu6vBPMEdarpU2sTZkI/pUmsdO63vO0R9Jw5Uyayylg91q2IFtE9uy5dvUrp+zo1dNph6MnJwRE7UyPPco+l4XpowB4YcertVfMF7prgs/8AIm/ZqWnrXoqv0PAP9pnyCVuFwD/aZ8lZ+GoHtsq3v9C2Ix3GvCsb4nSQsyyMF7N+0qb/AE64VfLM2aZpEcZuARbMQvR3kEWOyLowAAAAB0GiZC1oB1IM4gwKKtZewbIGgB1uQXkeL8NStkyNaSB7Tug6r2aknsFLIyN17sGu5siz7KcEfPc+GPjOoJHW2igsvZeK+HQ+MuYLegC8qqKAsflsdDzV5FSgD09MT2Uz4Lc0S+M5bBRw055lQHaDZVyN+jDquUKwjQYmbSP7/kEDJECCU3iCX61w9R9wSwzgNseiUl9UPl5Mjp5CNDstpw7AJIXMNvNdYovaGjrdXWG4gWtLQd1XbkpJN8g9bFke5unlJGigQbM0cj2OJOY5mk63RV163pGq+Wra+6PM9V0vxW5XZjikzIeoqQ0b/wCVBBTyTEZvKz+5W3U6yuhcmXT6SdzwiWSsFw1oJJ00F1c0GGFwu/T0TqDD2x2yt+PNW0ZPMLy+r6pZZxHg9Hpumwr5fIlLRMbs0d7KzpmcgEM02Vjh7b6rkOcm+WdWMUuw50Vk1qLnbohkDYeBpKVj9EijcOSpEJ4n7p+5sh2boinGqrJB0gsEFKUbV7KvLkeSEMkiIppFCIwd0+wGyOIDLWOQJXT88xVcyRMfVFNyUaTD6kHR2t+oWI46wR0UniZBkd9oDQd1ax4gW7aK7pqhtWwwy2IcLX9VW8rbk8ksB0Qk8iv+IcEdSyObu25yn0WcnYjUhEo4GeKuUWVcryBgK4if9fJ3H3BXGGYbFJE1zn2cdFW45Heok7j8IUAdl0vopDxQU39mFYrQiJ+UPa7bZG4VTlxA6KkMuZ7Vo8Lda59ET7Ap8g+N02mYe0zUeqqayuDGgnchaWEZiSfXRZniah8zSLWH2euqDSax0WZQzVaZXxSYmFUxkPiP25BaGDQhCUfsNsLC2wUoBuEWo1UrpZZdGnVMcIuHVoYNBc9AhJMUlOwaPQ7qg4mxksAbF5XDQu5rH/TJr5hI+/W5SoQyg5PB7FSzeK3UWI3VzhLvKe9l5bwlxDIHZXnMDpc7hehYdUXbfa5SprDDhLJcSS30UTgoIzqiC5KGEN7JR1TJngHupodVMkQ2I21UznW1SSRaXCGmOwULHyuuLqtq5/DYXE6omV9mn0WD4qrJHhwbmyi97JkeWBJlnJxFG02dO0E/GyvMPqBI0Fr2vG92leR0lMzeQXHRWvDOIGGc+GSGe6ditOxYE7j1Bk2ttEyeQBBSSMlLXhpDtL2vYpK1+xS2GiaR11JhFWY3gA7n5KrM+m6fTP8AMO6TnkJG34nw9tTBnt5mt3+C8nqog1xB5Few4bKHRBrvZIsV5jxnhn0ed3uu1b2TYsCaKWzOhXKHMuRCSbHD+sS+hH4Qq4yKxxsfrEvqR+EKta290yHigZ+THUQzP7LT0BsD2WdwpmpKv4H2BRS7FR7llGLD4KmqIxLIb7NKtr+S/ogaRu56rntcm2L4JQ0AAcgpqeHMVHZEUJsUSIzE8T0jhK8+qog8tuvWq/CmTC536qvi4ajBvlBt6JsbdvcBxMZgbToA03J3Xp2GR2Y0c7D5qoipGueMjQGtFjy1V3GcoASpz3MKEcBkBN9URmCrQ4k3uozK6+6DIYdUuBt1UkEthZVgcbrpXHRQhafSb3A7qF8nPqg2yFu3xU0Zva6hCQa3vzWWxyleC9sf2wQb7LWNI6ISupMw03Rp4KayeS1WHztcQW/LZWfDuEODg4jW+3ovQm0oeAC0XAtchOpMPDDfny9E35X2A2nRRZWhBYkNFcFirsQjUzknYyVRUFrx0uFoKcgFp5aKqrqXnbZWEGzewSZdyGwopzkt8Qsx/qSc0DHfaa4AH4q6on+XsFUcVuBjaCLjNsUytkkYK59Vytco6BKnCsEeNi80ncfcFWvCuq9t3E/92QBhuUcOyEz7smoYsoCsEDTSXdbojZDom44IguSozMyj0ClhisAFUU013WWihAsFknDkfGQLlUkDblTTRDcJlMdUsbkt6dugumVbwAQOaWMqKUapbCBoMrAp45bqvq5dbDknwRk9fghLCHy2Oie1t1IynFtjf1UjIlMEEp49dUY9oQ9w3c6JH1TLbo0imznxpgzdETTEOFxspfDVpEyDMcVKxyllpDa+lkOBZRshM0KXImxKeypckBXBVtduraUaKmrn6pyAYFNFcFNpY9USxt+SdDDluUD5ImFU77BVHEU2Ytb03RMtT4bCT6rN1daXG5TIRAskPyrkN9N9EibgVuExmuyOsAhqepcWuJb2ReK0wcbnko2uAFtLJlUfqhdj+w3BnFzjcWVnU6IXDTd5RtQLp2AUwCmdZ11o6OS4WSfIQVf4PNIbDLce8kTQyLLWZ9hshYTrdH1HsoGLdZpI0RZbQG9lHVzhoKBlriy1r+pQ1XP4lmgbpLGEcbi4/FabDzYDTkq2gpMtrhXtNG0AkqgkRvfmdbohauqbGbHpqeiTEKoRtdJcZRpfovN8Z4odI5wG21+ZTYQyBKWDZVeLMOjTr0QbsRbsVhBjAFtCDzN084pfXUlN+PAr5D0vCsSBIF1eOk0uvJaDGX32W1wfHGyNAJsWjUFC4F7zUteSBdDStUlLIHtBGxTntSXEankhhdZFl6FdoopZ1a4JkKe9VFY+xRviXCGfHcpjAY+kOiJnpy5jrb2TWR22VgWDIQTa4UjEhgsaqNmA7b91SyqwxI2e4HkSq+R11phERNkaVclR4FG14bpYpJyyVoII0v2WgqOA6R5JGdt+h0CzeETBtUPl/YL0qEbfBHQvogrPJmAxPgxtIDIx5LehWfqBoey9Q4tH6u5eV1dQAbc02awAimjjLnHZajA4gLAofA8GMnnJba+xWpZStaLC3yWSbGxQLUAWVc/RW0kaElowNdVmkaIkUWWxuL9dEPRQ3luNuQUkjiNk2kNnXSWGi8bIGgX3SzVFgbKGsgD2XB1TTIwR5L+YbnmokWzGcaSua2zScrz5hyWGcF6NxHB4jbDduo9Vj6eo8Bzj4cbwRq2Qat7LVW8IRMGpoad1s7y0+gUroKVo/avPwCrql4c4kNDb8hsFE4J4rAX9KaHeS9lbYTMXSCx725oWlr5DGYw2Frebi0Zlc8O0rWEOJ0tYac0M8Fo9DwQ+UA9Ef4wFwBcqmwWpFzvsrcRt3vvyWZrI+JDLdCOiuUfKVA1qHAQ3JYWXMYVLkRcMOiJMoghYb7Iypo3ysPhuAfbQHYpQEbRvsmRKaPKsbw2aF58VtiTuNiqt4Xt2K0TKqJzHbkXDrC4K8axSiMUjmHkSB2Tk8CZxBFyalV5E4NRJ5ZM3RwP3L02nqWhjHFw1aCvFcerHCaRoOgc38IK12G1xdFHcnRtkzTv6IuzyZo+KsSD4crdjuV5hJRSPlFhud+QW3nnBjdzsLoHDae5zn4Jlr4KQRhlL4TLE68+iJL7JxKe1gO4XPmzVBcELTdLM24spxGByTsnRJGJFaIb6FBOGV1lcSxoCqhuboWgkH0+wTZqdty42vbQX5oKnqXN9oGyWcsk1vYg9VaIykxF5BOYW7bLK4pTeI64IutlXU43LxbkqCopIifbI1OwTFITJGWnpS3f+ygjiLjZauaKJjTlFy4WBKEjiY3LmjFti4E37pqmBtBKLDWnUuvrtZarCSwWuPQDkFVwNiOmYt7q5w+AG3muBzQSbZaiaKiY3Uiys4gqrD4GAm79xprojZaprbAFLyNiieYhQQvueyGknzA2vdTwOuPW2qrcFgJCmbIQhWMG5Kk8Vp23CsmApsinjlVaxyIYSmRBLuhlusF/qJh7WPa9o9u5IWvpJywqHiyFk0JcAC5oOnNNQuXY8iy91yMs7905cjM2QPiMfrEv8TfwtV3g1UTE0dNFS8R/+TN/EPwBH4C+7COhRUP6IlnmzQU0heHBWMejQEDhzhY9UXnV2y4CguQiNymDkCJbJW1YuBZYZs0xLFpUZuD6dE2N66eQAj1SxyJCQUJLGprpCFeSAwYNM2yCljZmNmn5qzLLqN1L0ChRXvhzWuLjogX4HE4nzlh9dQrpzC1RPsTqFEC0U8nDLDb68ED0Txwwx2vjXtpZXEVuiddgvpui3FYM0MBI6EXVpFRNa2zRbr3Rb3dFECTsqci0gfwSCPNtyR5iboUjaUndER0+ioMRrVzn5VM2OyhqRZUkQikqSUkZOmqiZHc3RTWKygyB6sIXqrisEXDKOqZEFlxAW9ESWNI9kaiyq4ZFOHm+6YmUN/RTejfkuRfjf90SotwOxHiPEf/kzfxD8IRXD3su7rlybT/bRls82aSgRq5cgtCj3Iymc0q5ZZGiIXT/knTcly5LfYcSJQuXKoliNUreaVcmFIhlQrly5QpiBMeuXKmURFS06RcqIg9qckXKwkch6zZcuULIqZTLlyhB4UsKRciiAw+mRK5cmAk65cuUIf//Z';
      final userModel = UserModel(
        displayName: displayName,
        uid: user.uid,
        email: user.email!,
        photo: photoDefault,
        provider: provider,
      );
      await users.doc(user.uid).set(
            userModel.toJson(),
            SetOptions(
              merge: true,
            ),
          );
      return true;
    } catch (e) {
      print(e);
      return false;
    }
  }
}
